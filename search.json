[{"path":"https://mitmat.github.io/eurocordexr/articles/grids.html","id":"staying-in-the-native-rotated-pole-grid-with-eurocordexr","dir":"Articles","previous_headings":"","what":"Staying in the native rotated-pole grid (with eurocordexr)","title":"Reading a rotated-pole grid into R","text":"First get coordinates (just one timestep): actual data. nicer plotting, create factor season labels, helper function https://github.com/mitmat/mitmatmisc/. finally plot past climatology.  future change signal.","code":"dat_aux <- nc_grid_to_dt(file_nc_past, add_xy = T, date_range = c(\"2000-01-15\", \"2000-01-15\")) # keep only cell index (for merging) and coordinates (which have some rounding issues) dat_aux <- dat_aux[, .(icell, rlon = round(rlon, 3), rlat  = round(rlat, 3))] dat_past <- nc_grid_to_dt(file_nc_past) dat_future <- nc_grid_to_dt(file_nc_future) dat_past[, season := mitmatmisc::season_fct(month(date))] dat_future[, season := mitmatmisc::season_fct(month(date))] dat_past |>    merge(dat_aux) |>    ggplot(aes(rlon, rlat, fill = tas))+   geom_raster()+   facet_wrap(~season)+   theme_minimal()+   scale_fill_scico(direction = -1) dat_past[, .(icell, season, tas_past = tas)] |>    merge(dat_future[, .(icell, season, tas_future = tas)]) |>    merge(dat_aux, by = \"icell\") |>       ggplot(aes(rlon, rlat, fill = tas_future - tas_past))+   geom_raster()+   facet_wrap(~season)+   theme_minimal()+   scale_fill_scico(palette = \"vik\", midpoint = 0)"},{"path":"https://mitmat.github.io/eurocordexr/articles/grids.html","id":"using-a-curvilinear-grid-stars-package","dir":"Articles","previous_headings":"","what":"Using a curvilinear grid (stars package)","title":"Reading a rotated-pole grid into R","text":"stars package support rotated-pole grid capability read curvilinear grids. won’t give best performance, can work much preprocessing outside R.  ggplot:","code":"library(stars) #> Loading required package: abind #> Loading required package: sf #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE rs <- read_stars(file_nc_past) #  take 1 timestep rs1 <- rs[,,,1]  plot(rs1) ggplot()+   geom_stars(data = rs1)+   theme_minimal()+   scale_fill_scico(direction = -1)"},{"path":"https://mitmat.github.io/eurocordexr/articles/grids.html","id":"using-a-regular-lonlat-grid-terra-package","dir":"Articles","previous_headings":"","what":"Using a regular lonlat grid (terra package)","title":"Reading a rotated-pole grid into R","text":"Finally, third way first convert rotated-pole grid regular lonlat grid. See article CDO.","code":"library(terra) #> terra 1.8.5 #>  #> Attaching package: 'terra' #> The following object is masked from 'package:data.table': #>  #>     shift file_nc_regular <- system.file(\"extdata\", \"alps1_regular.nc\", package = \"eurocordexr\") rs2 <- rast(file_nc_regular) plot(rs2)"},{"path":"https://mitmat.github.io/eurocordexr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Matiu. Author, maintainer.","code":""},{"path":"https://mitmat.github.io/eurocordexr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Matiu M (2025). eurocordexr: Makes Easier Work Daily 'netCDF' EURO-CORDEX RCMs. R package version 0.2.5, https://mitmat.github.io/eurocordexr/, https://github.com/mitmat/eurocordexr.","code":"@Manual{,   title = {eurocordexr: Makes it Easier to Work with Daily 'netCDF' from EURO-CORDEX RCMs},   author = {Michael Matiu},   year = {2025},   note = {R package version 0.2.5, https://mitmat.github.io/eurocordexr/},   url = {https://github.com/mitmat/eurocordexr}, }"},{"path":[]},{"path":"https://mitmat.github.io/eurocordexr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Makes it Easier to Work with Daily netCDF from EURO-CORDEX RCMs","text":"package developped make life easier working daily netcdf files EURO-CORDEX RCMs. Relies data.table heavy data lifting. Works many CF-conform netCDF files, like CMIP, others, !","code":""},{"path":"https://mitmat.github.io/eurocordexr/index.html","id":"main-components","dir":"","previous_headings":"Overview","what":"Main components:","title":"Makes it Easier to Work with Daily netCDF from EURO-CORDEX RCMs","text":"extract whole array variable long format, optionally subset dates: nc_grid_to_dt() can deal non-standard calendars (360, noleap) interpolate get check list EURO-CORDEX .nc files: get_inventory(), CMIP5 (get_inventory_cmip5()) extract single grid cells (e.g. stations) rotated pole grid: rotpole_nc_point_to_dt() raw backbone extract curvilinear netcdf array long format: nc_grid_to_dt_raw()","code":""},{"path":"https://mitmat.github.io/eurocordexr/index.html","id":"alternatives","dir":"","previous_headings":"Overview","what":"Alternatives:","title":"Makes it Easier to Work with Daily netCDF from EURO-CORDEX RCMs","text":"stars terra (previously raster) packages can used similarly, although functionality rotated pole grids non-standard calendars might different.","code":""},{"path":"https://mitmat.github.io/eurocordexr/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Makes it Easier to Work with Daily netCDF from EURO-CORDEX RCMs","text":"See article read rotated-pole grids usage examples.","code":""},{"path":"https://mitmat.github.io/eurocordexr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Makes it Easier to Work with Daily netCDF from EURO-CORDEX RCMs","text":"Get CRAN version: get latest (development) version github: Requires netCDF system libraries.","code":"# from CRAN install.packages(\"eurocordexr\") # from github # install.packages(\"pak\") pak::pak(\"mitmat/eurocordexr\")"},{"path":"https://mitmat.github.io/eurocordexr/index.html","id":"contribution-and-help","dir":"","previous_headings":"","what":"Contribution and help","title":"Makes it Easier to Work with Daily netCDF from EURO-CORDEX RCMs","text":"ideas suggestions welcome! Feel free contact open issues github.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/check_inventory.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform some checks on the inventory — check_inventory","title":"Perform some checks on the inventory — check_inventory","text":"simple checks multiple time frequencies, domains, ensembles, downscale realizations, completeness simulation periods. Can also run compare_variables_in_inventory check completeness variables models. checks meant guides , since one might wish multiple elements climate model ensemble assessments.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/check_inventory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform some checks on the inventory — check_inventory","text":"","code":"check_inventory(data_inventory, check_hist = FALSE, check_vars = FALSE)"},{"path":"https://mitmat.github.io/eurocordexr/reference/check_inventory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform some checks on the inventory — check_inventory","text":"data_inventory data.table resulting get_inventory. check_hist Boolean, TRUE, tests rcp* corresponding historical run. check_vars Boolean, TRUE, runs compare_variables_in_inventory check variables available models.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/check_inventory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform some checks on the inventory — check_inventory","text":"object class \"eurocordexr_inv_check\" (overloaded list) results checks. special print method, shows verbose summary results.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/check_inventory.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform some checks on the inventory — check_inventory","text":"checks multiple time frequency (day, month, ...) multiple domains (EUR-11, EUR-44, ...) multiple ensembles (r1i1p1, r2i1p1, ...) multiple downscale realizations (v1, v2, ..) complete periods simulations: historical usually goes approx. 1950/70 - 2005, rcp* 2006 - 2100; evaluation checked, heterogeneous periods; cordex-adjust historical rcp* combined rcp* corresponding historical run (optional, default; otherwise problematic merged hist rcp runs, cordex-adjust) variables (tas, pr, ...) available models (optional, default)","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/check_inventory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform some checks on the inventory — check_inventory","text":"","code":"# some empty example files fn_zip <- system.file(\"extdata\", \"inv-test-files.zip\", package = \"eurocordexr\") tmpdir <- tempdir() unzip(fn_zip, exdir = tmpdir)  dat_inv <- get_inventory(fs::path(tmpdir, \"testdata\")) check_inventory(dat_inv) #> Checks performed:  #> ------------------------------------------------------ #> ------------------------------------------------------ #> No multiple time frequencies.  #> ------------------------------------------------------ #> ------------------------------------------------------ #> No multiple domains.  #> ------------------------------------------------------ #> ------------------------------------------------------ #> Multiple ensembles in 1 cases:  #>    variable domain              gcm                institute_rcm experiment #>      <char> <char>           <char>                       <char>     <char> #> 1:       pr EUR-11 MPI-M-MPI-ESM-LR CLMcom-ETH-COSMO-crCLIM-v1-1 historical #>    downscale_realisation timefreq     N      ensembles #>                   <char>   <char> <int>         <char> #> 1:                    v1      day     2 r1i1p1, r2i1p1 #> ------------------------------------------------------ #> ------------------------------------------------------ #> No multiple downscale realisations  #> ------------------------------------------------------ #> ------------------------------------------------------ #> Following model runs do not have complete periods:  #>    variable domain                   gcm institute_rcm experiment ensemble #>      <char> <char>                <char>        <char>     <char>   <char> #> 1:       pr EUR-11 CNRM-CERFACS-CNRM-CM5 CNRM-ALADIN63 historical   r1i1p1 #>    downscale_realisation timefreq nn_files date_start   date_end #>                   <char>   <char>    <int>     <Date>     <Date> #> 1:                    v2      day        5 1951-01-01 1985-12-31 #>    total_simulation_years period_contiguous #>                     <int>            <lgcl> #> 1:                     25             FALSE #> ------------------------------------------------------ #> ------------------------------------------------------ #> Finished checks.  #> ------------------------------------------------------ #> ------------------------------------------------------"},{"path":"https://mitmat.github.io/eurocordexr/reference/check_inventory_cmip5.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform some checks on the inventory of CMIP5 files — check_inventory_cmip5","title":"Perform some checks on the inventory of CMIP5 files — check_inventory_cmip5","text":"simple checks multiple time frequencies, ensembles, completeness simulation periods. checks meant guides , since one might wish multiple elements climate model ensemble assessments.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/check_inventory_cmip5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform some checks on the inventory of CMIP5 files — check_inventory_cmip5","text":"","code":"check_inventory_cmip5(data_inventory, check_hist = FALSE)"},{"path":"https://mitmat.github.io/eurocordexr/reference/check_inventory_cmip5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform some checks on the inventory of CMIP5 files — check_inventory_cmip5","text":"data_inventory data.table resulting get_inventory. check_hist Boolean, TRUE, tests rcp* corresponding historical run.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/check_inventory_cmip5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform some checks on the inventory of CMIP5 files — check_inventory_cmip5","text":"object class \"eurocordexr_inv_check_cmip5\" (overloaded list) results checks. special print method, shows verbose summary results.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/check_inventory_cmip5.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform some checks on the inventory of CMIP5 files — check_inventory_cmip5","text":"checks multiple time frequency (day, month, ...) multiple ensembles (r1i1p1, r2i1p1, ...) complete periods simulations: complete means least 1860-2005 historical 2006-2099 rcp* rcp* corresponding historical run (optional, default; otherwise problematic merged hist rcp runs)","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/check_inventory_cmip5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform some checks on the inventory of CMIP5 files — check_inventory_cmip5","text":"","code":"# some empty example files fn_zip <- system.file(\"extdata\", \"inv-test-files-cmip5.zip\", package = \"eurocordexr\") tmpdir <- tempdir() unzip(fn_zip, exdir = tmpdir)  dat_inv <- get_inventory_cmip5(fs::path(tmpdir, \"testdata-cmip5\")) check_inventory_cmip5(dat_inv) #> Checks performed:  #> ------------------------------------------------------ #> ------------------------------------------------------ #> Multiple time frequencies detected: Amon day  #> ------------------------------------------------------ #> ------------------------------------------------------ #> Multiple ensembles in 3 cases:  #>    variable       gcm experiment timefreq     N              ensembles #>      <char>    <char>     <char>   <char> <int>                 <char> #> 1:       pr ACCESS1-0 historical     Amon     3 r1i1p1, r2i1p1, r3i1p1 #> 2:      tas ACCESS1-0 historical     Amon     3 r1i1p1, r2i1p1, r3i1p1 #> 3:      tas ACCESS1-3 historical     Amon     3 r1i1p1, r2i1p1, r3i1p1 #> ------------------------------------------------------ #> ------------------------------------------------------ #> Following model runs do not have complete periods:  #>    variable timefreq        gcm experiment ensemble nn_files date_start #>      <char>   <char>     <char>     <char>   <char>    <int>     <Date> #> 1:       pr     Amon  CMCC-CESM historical   r1i1p1        2 1855-01-01 #> 2:      tas     Amon   CMCC-CMS      rcp85   r1i1p1        2 2070-01-01 #> 3:   tasmax      day HadGEM2-ES      rcp85   r1i1p1        2 2279-12-01 #> 4:   tasmin      day HadGEM2-ES      rcp26   r1i1p1       11 2005-12-01 #>      date_end total_simulation_years period_contiguous #>        <Date>                  <int>            <lgcl> #> 1: 1879-12-01                     10             FALSE #> 2: 2100-12-01                     21             FALSE #> 3: 2299-12-30                     12             FALSE #> 4: 2139-11-30                    112             FALSE #> ------------------------------------------------------ #> ------------------------------------------------------ #> Finished checks.  #> ------------------------------------------------------ #> ------------------------------------------------------"},{"path":"https://mitmat.github.io/eurocordexr/reference/compare_variables_in_inventory.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare an EURO-CORDEX inventory for different variables — compare_variables_in_inventory","title":"Compare an EURO-CORDEX inventory for different variables — compare_variables_in_inventory","text":"Casts result get_inventory different variables order compare completeness inventory. Adds columns checking equality years number files.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/compare_variables_in_inventory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare an EURO-CORDEX inventory for different variables — compare_variables_in_inventory","text":"","code":"compare_variables_in_inventory(data_inventory, vars = NULL)"},{"path":"https://mitmat.github.io/eurocordexr/reference/compare_variables_in_inventory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare an EURO-CORDEX inventory for different variables — compare_variables_in_inventory","text":"data_inventory data.table resulting get_inventory. vars Character vector variables compare. NULL, use variables data_inventory.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/compare_variables_in_inventory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare an EURO-CORDEX inventory for different variables — compare_variables_in_inventory","text":"casted data.table boolean columns years number   files equal variables.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/compare_variables_in_inventory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare an EURO-CORDEX inventory for different variables — compare_variables_in_inventory","text":"","code":"if (FALSE) { # \\dontrun{  path <- \"/mnt/CEPH_BASEDATA/METEO/SCENARIO\" dat <- get_inventory(path) dat_compare <- compare_variables_in_inventory(dat, c(\"tas\",\"rsds\",\"pr\")) } # }"},{"path":"https://mitmat.github.io/eurocordexr/reference/eurocordexr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"eurocordexr: Makes it Easier to Work with Daily 'netCDF' from EURO-CORDEX RCMs — eurocordexr-package","title":"eurocordexr: Makes it Easier to Work with Daily 'netCDF' from EURO-CORDEX RCMs — eurocordexr-package","text":"Daily 'netCDF' data e.g. regional climate models (RCMs) trivial work . package, relies 'data.table', makes easier deal large data RCMs, EURO-CORDEX (https://www.euro-cordex.net/, https://cordex.org/data-access/). functions extract single grid cells rotated pole grids well whole array long format. Can handle non-standard calendars (360, noleap) interpolate standard one. Potentially works many CF-conform 'netCDF' files.","code":""},{"path":[]},{"path":"https://mitmat.github.io/eurocordexr/reference/eurocordexr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"eurocordexr: Makes it Easier to Work with Daily 'netCDF' from EURO-CORDEX RCMs — eurocordexr-package","text":"Maintainer: Michael Matiu michaelmatiu@gmail.com (ORCID)","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/get_inventory.html","id":null,"dir":"Reference","previous_headings":"","what":"Get inventory from path containing EURO-CORDEX .nc files — get_inventory","title":"Get inventory from path containing EURO-CORDEX .nc files — get_inventory","text":"Returns data.table information splitting netcdf files components (GCM, RCM, variable, experiment, ...) aggregates years.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/get_inventory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get inventory from path containing EURO-CORDEX .nc files — get_inventory","text":"","code":"get_inventory(path, add_files = TRUE)"},{"path":"https://mitmat.github.io/eurocordexr/reference/get_inventory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get inventory from path containing EURO-CORDEX .nc files — get_inventory","text":"path Path searched recursively .nc files. add_files Boolean (default TRUE), TRUE, add column containing lists associated files full paths (useful e.g. processing).","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/get_inventory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get inventory from path containing EURO-CORDEX .nc files — get_inventory","text":"data.table inventory information.","code":""},{"path":[]},{"path":"https://mitmat.github.io/eurocordexr/reference/get_inventory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get inventory from path containing EURO-CORDEX .nc files — get_inventory","text":"","code":"# some empty example files fn_zip <- system.file(\"extdata\", \"inv-test-files.zip\", package = \"eurocordexr\") tmpdir <- tempdir() unzip(fn_zip, exdir = tmpdir)  dat_inv <- get_inventory(fs::path(tmpdir, \"testdata\", \"mixed-vars\")) print(dat_inv) #>    variable domain                   gcm                institute_rcm #>      <char> <char>                <char>                       <char> #> 1:     orog EUR-11        ICHEC-EC-EARTH                KNMI-RACMO22E #> 2:     orog EUR-11     IPSL-IPSL-CM5A-LR              GERICS-REMO2015 #> 3:       pr EUR-11 CNRM-CERFACS-CNRM-CM5 CLMcom-ETH-COSMO-crCLIM-v1-1 #> 4:   tasmax EUR-11 CNRM-CERFACS-CNRM-CM5 CLMcom-ETH-COSMO-crCLIM-v1-1 #> 5:   tasmin EUR-11 CNRM-CERFACS-CNRM-CM5 CLMcom-ETH-COSMO-crCLIM-v1-1 #>    experiment ensemble downscale_realisation timefreq date_start   date_end #>        <char>   <char>                <char>   <char>     <Date>     <Date> #> 1:      rcp45   r1i1p1                    v1       fx       <NA>       <NA> #> 2:      rcp26   r0i0p0                    v1       fx       <NA>       <NA> #> 3: historical   r1i1p1                    v1      day 1951-01-01 2005-12-31 #> 4: historical   r1i1p1                    v1      day 1951-01-01 2005-12-31 #> 5: historical   r1i1p1                    v1      day 1951-01-01 2005-12-31 #> 4 variables not shown: nn_files <int>, total_simulation_years <int>, period_contiguous <lgcl>, list_files <list>"},{"path":"https://mitmat.github.io/eurocordexr/reference/get_inventory_cmip5.html","id":null,"dir":"Reference","previous_headings":"","what":"Get inventory from path containing CMIP5 GCMs .nc files — get_inventory_cmip5","title":"Get inventory from path containing CMIP5 GCMs .nc files — get_inventory_cmip5","text":"Returns data.table information splitting netcdf files components (GCM, variable, experiment, ...) aggregates years.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/get_inventory_cmip5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get inventory from path containing CMIP5 GCMs .nc files — get_inventory_cmip5","text":"","code":"get_inventory_cmip5(path, add_files = TRUE)"},{"path":"https://mitmat.github.io/eurocordexr/reference/get_inventory_cmip5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get inventory from path containing CMIP5 GCMs .nc files — get_inventory_cmip5","text":"path Path searched recursively .nc files. add_files Boolean (default TRUE), TRUE, add column containing lists associated files full paths (useful e.g. processing).","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/get_inventory_cmip5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get inventory from path containing CMIP5 GCMs .nc files — get_inventory_cmip5","text":"data.table inventory information.","code":""},{"path":[]},{"path":"https://mitmat.github.io/eurocordexr/reference/get_inventory_cmip5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get inventory from path containing CMIP5 GCMs .nc files — get_inventory_cmip5","text":"","code":"# some empty example files fn_zip <- system.file(\"extdata\", \"inv-test-files-cmip5.zip\", package = \"eurocordexr\") tmpdir <- tempdir() unzip(fn_zip, exdir = tmpdir)  dat_inv <- get_inventory_cmip5(fs::path(tmpdir, \"testdata-cmip5\", \"basic\")) print(dat_inv) #>      variable timefreq          gcm experiment ensemble date_start   date_end #>        <char>   <char>       <char>     <char>   <char>     <Date>     <Date> #>  1: areacella       fx      CanESM2 historical   r0i0p0       <NA>       <NA> #>  2: areacella       fx IPSL-CM5A-LR historical   r0i0p0       <NA>       <NA> #>  3:      orog       fx    FGOALS-g2 historical   r0i0p0       <NA>       <NA> #>  4:        pr     Amon    ACCESS1-0 historical   r1i1p1 1850-01-01 2005-12-01 #>  5:        pr     Amon    ACCESS1-0 historical   r2i1p1 1850-01-01 2005-12-01 #>  6:        pr     Amon    ACCESS1-0 historical   r3i1p1 1850-01-01 2005-12-01 #>  7:        pr     Amon    ACCESS1-0      rcp45   r1i1p1 2006-01-01 2100-12-01 #>  8:        pr     Amon    CMCC-CESM historical   r1i1p1 1855-01-01 1879-12-01 #>  9:        pr      day     CNRM-CM5 historical   r1i1p1 1990-01-01 2005-12-31 #> 10:        pr      day     CNRM-CM5      rcp26   r1i1p1 2006-01-01 2025-12-31 #> 11:       tas     Amon     CMCC-CMS      rcp85   r1i1p1 2070-01-01 2100-12-01 #> 12:       tas     Amon   CNRM-CM5-2 historical   r1i1p1 1850-01-01 2005-12-01 #> 13:       tas      day    NorESM1-M historical   r1i1p1 1850-01-01 2005-12-31 #> 14:    tasmax      day   HadGEM2-ES      rcp85   r1i1p1 2279-12-01 2299-12-30 #> 15:    tasmax      day IPSL-CM5A-MR historical   r1i1p1 1850-01-01 2005-12-31 #> 4 variables not shown: nn_files <int>, total_simulation_years <int>, period_contiguous <lgcl>, list_files <list>"},{"path":"https://mitmat.github.io/eurocordexr/reference/get_varnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get variable names from netcdf file — get_varnames","title":"Get variable names from netcdf file — get_varnames","text":"Wrapper around ncdf4.helpers::nc.get.variable.list.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/get_varnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get variable names from netcdf file — get_varnames","text":"","code":"get_varnames(filename)"},{"path":"https://mitmat.github.io/eurocordexr/reference/get_varnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get variable names from netcdf file — get_varnames","text":"filename .nc file","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/get_varnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get variable names from netcdf file — get_varnames","text":"vector variable names","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/get_varnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get variable names from netcdf file — get_varnames","text":"","code":"# example data from EURO-CORDEX (cropped for size) fn1 <- system.file(\"extdata\", \"test1.nc\", package = \"eurocordexr\") get_varnames(fn1) #> [1] \"tasmin\""},{"path":"https://mitmat.github.io/eurocordexr/reference/map_non_standard_calendar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create map indices from non-standard calendars — map_non_standard_calendar","title":"Create map indices from non-standard calendars — map_non_standard_calendar","text":"Interpolates non-standard calendars (360 noleap) standard Gregorian. Assumes daily data input.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/map_non_standard_calendar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create map indices from non-standard calendars — map_non_standard_calendar","text":"","code":"map_non_standard_calendar(times)"},{"path":"https://mitmat.github.io/eurocordexr/reference/map_non_standard_calendar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create map indices from non-standard calendars — map_non_standard_calendar","text":"times Vector class PCICt (truncated days).","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/map_non_standard_calendar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create map indices from non-standard calendars — map_non_standard_calendar","text":"data.table columns:  dates_full: sequence standard dates min max date   input times data.table::IDate dates_pcict_inter: dates   PCICt times correspond standard dates idx_pcict:   index associated input times used mapping e.g. values","code":""},{"path":[]},{"path":"https://mitmat.github.io/eurocordexr/reference/map_non_standard_calendar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create map indices from non-standard calendars — map_non_standard_calendar","text":"","code":"# example data from EURO-CORDEX (cropped for size) # non-standard calendar (360) fn2 <- system.file(\"extdata\", \"test2.nc\", package = \"eurocordexr\") ncobj <- ncdf4::nc_open(fn2)  # read as PCICt-class times <- ncdf4.helpers::nc.get.time.series(ncobj, \"tasmin\") str(times) #>  'PCICt' num [1:390(1d)] 1949-12-01 12:00:00 1949-12-02 12:00:00 1949-12-03 12:00:00 1949-12-04 12:00:00 ... #>  - attr(*, \"cal\")= chr \"360\" #>  - attr(*, \"months\")= num [1:12] 30 30 30 30 30 30 30 30 30 30 ... #>  - attr(*, \"dpy\")= num 360 #>  - attr(*, \"tzone\")= chr \"GMT\" #>  - attr(*, \"units\")= chr \"secs\"  dtx <- map_non_standard_calendar(times) dtx[58:64] #>    dates_full dates_pcict_inter idx_pcict #>        <Date>            <char>     <num> #> 1: 1950-01-27        1950-01-27        57 #> 2: 1950-01-28        1950-01-28        58 #> 3: 1950-01-29        1950-01-29        59 #> 4: 1950-01-30        1950-01-30        60 #> 5: 1950-01-31        1950-02-01        61 #> 6: 1950-02-01        1950-02-02        62 #> 7: 1950-02-02        1950-02-03        63"},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a netcdf array to long format as data.table — nc_grid_to_dt","title":"Convert a netcdf array to long format as data.table — nc_grid_to_dt","text":"Extracts variable netcdf, returns data.table cell index, date, values, optionally: coordinates.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a netcdf array to long format as data.table — nc_grid_to_dt","text":"","code":"nc_grid_to_dt(   filename,   variable,   icell_raster_pkg = TRUE,   add_xy = FALSE,   interpolate_to_standard_calendar = FALSE,   date_range,   verbose = FALSE )"},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a netcdf array to long format as data.table — nc_grid_to_dt","text":"filename Complete path .nc file. variable Name variable extract filename (character). icell_raster_pkg Boolean, TRUE, cell indices ordered extracting data raster package. add_xy Boolean, TRUE, adds columns x y coordinates. interpolate_to_standard_calendar Boolean, TRUE use map_non_standard_calendar interpolate values standard calendar. date_range (optional) two-element vector class Date (min, max), used extract parts netcdf file verbose Boolean, TRUE, prints information.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a netcdf array to long format as data.table — nc_grid_to_dt","text":"data.table columns: date: Date class Date, file   standard calendar. Date character, non-standard calendar   (360, noleap) interpolate_to_standard_calendar set   FALSE. interpolate_to_standard_calendar TRUE,   always class Date. variable: Values, column   renamed input variable (optional) x,y: Coordinates   netcdf dimensions, renamed dimension names found array named   input variable","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a netcdf array to long format as data.table — nc_grid_to_dt","text":"Coordinates usually put result, saves space. recommended merge final operations. unique cell index efficient. However, plan merge data extracted raster package (assuming grid), cell indices might differ. Set icell_raster_pkg TRUE, cell indices. Note raster ncdf4 different concepts coordinates (cell corner vs. cell center), merging based coordinates can produce arbitrary results (besides rounding issues).","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Convert a netcdf array to long format as data.table — nc_grid_to_dt","text":"Netcdf files can huge, loading everything memory   can rapidly crash R session. Think first subsetting   aggregating (e.g. using CDO:   https://code.mpimet.mpg.de/projects/cdo/).","code":""},{"path":[]},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a netcdf array to long format as data.table — nc_grid_to_dt","text":"","code":"# example data from EURO-CORDEX (cropped for size) fn1 <- system.file(\"extdata\", \"test1.nc\", package = \"eurocordexr\") dat <- nc_grid_to_dt(fn1) str(dat) #> Classes ‘data.table’ and 'data.frame':\t25550 obs. of  3 variables: #>  $ icell : int  64 65 66 67 68 69 70 57 58 59 ... #>  $ date  : Date, format: \"1950-01-01\" \"1950-01-01\" ... #>  $ tasmin: num  269 269 271 271 272 ... #>  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a netcdf array to long format as data.table (raw version) — nc_grid_to_dt_raw","title":"Convert a netcdf array to long format as data.table (raw version) — nc_grid_to_dt_raw","text":"Extracts variable netcdf, similar nc_grid_to_dt, raw version. Requires manual info, convert time units (like 'days since x'), requires xy variables dimensions (like curvilinear grid).","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a netcdf array to long format as data.table (raw version) — nc_grid_to_dt_raw","text":"","code":"nc_grid_to_dt_raw(   filename,   variable,   var_t,   var_x,   var_y,   has_time = TRUE,   icell_raster_pkg = TRUE )"},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a netcdf array to long format as data.table (raw version) — nc_grid_to_dt_raw","text":"filename Complete path .nc file. variable Character, name variable extract (required). var_t Character, name time variable. (recommended has_time=TRUE) var_x (optional) Character, name x coordinate variable (dimension!). var_x var_y supplied, results xy columns, . var_y (optional) Character, name y coordinate variable (dimension!). var_x var_y supplied, results xy columns, . has_time Boolean, TRUE (default), read time information file. Use FALSE, file time dimension/variable. icell_raster_pkg Boolean, TRUE, cell indices ordered extracting data raster package. See also nc_grid_to_dt","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a netcdf array to long format as data.table (raw version) — nc_grid_to_dt_raw","text":"data.table columns icell (cell   index), time (has_time=T), value. var_x var_y supplied also   x y. Column names except icell variable names netcdf   file.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a netcdf array to long format as data.table (raw version) — nc_grid_to_dt_raw","text":"Names netcdf variables can inquired terminal \"ncdump -h\", R example using ncdf4::nc_open(filename). Example use cases: netcdf file issues dimensions (dimvar), time variable non-standard format.","code":""},{"path":[]},{"path":"https://mitmat.github.io/eurocordexr/reference/nc_grid_to_dt_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a netcdf array to long format as data.table (raw version) — nc_grid_to_dt_raw","text":"","code":"# example data fn3 <- system.file(\"extdata\", \"test3.nc\", package = \"eurocordexr\") dat <- nc_grid_to_dt_raw(fn3, \"tasmax\", \"Times\") str(dat) #> Classes ‘data.table’ and 'data.frame':\t51660 obs. of  3 variables: #>  $ icell : int  821 822 823 824 825 826 827 828 829 830 ... #>  $ Times : num  19790702 19790702 19790702 19790702 19790702 ... #>  $ tasmax: num  0.7883 0.6704 0.4309 0.0592 -0.1017 ... #>  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"https://mitmat.github.io/eurocordexr/reference/print.eurocordexr_inv.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an inventory — print.eurocordexr_inv","title":"Print an inventory — print.eurocordexr_inv","text":"Modified data.table::print.data.table print inventory get_inventory get_inventory_cmip5 nicely removing columns.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/print.eurocordexr_inv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an inventory — print.eurocordexr_inv","text":"","code":"# S3 method for class 'eurocordexr_inv' print(x, all_cols = F, ...)"},{"path":"https://mitmat.github.io/eurocordexr/reference/print.eurocordexr_inv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an inventory — print.eurocordexr_inv","text":"x data.table print all_cols Boolean (default FALSE), TRUE, print columns available ... passed data.table::print.data.table","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/print.eurocordexr_inv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an inventory — print.eurocordexr_inv","text":"x invisibly, used side effects: prints console","code":""},{"path":[]},{"path":"https://mitmat.github.io/eurocordexr/reference/rotpole_nc_point_to_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract time series of a single grid cell of a rot-pole daily netcdf to data.table — rotpole_nc_point_to_dt","title":"Extract time series of a single grid cell of a rot-pole daily netcdf to data.table — rotpole_nc_point_to_dt","text":"Creates data.table rotated pole netcdf (usually found RCMs), includes values date. Useful extracting e.g. series station. Requires dimension variables netcdf file contain rlon rlat, contains daily data.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/rotpole_nc_point_to_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract time series of a single grid cell of a rot-pole daily netcdf to data.table — rotpole_nc_point_to_dt","text":"","code":"rotpole_nc_point_to_dt(   filename,   variable,   point_lon,   point_lat,   interpolate_to_standard_calendar = FALSE,   verbose = FALSE,   add_grid_coord = FALSE )"},{"path":"https://mitmat.github.io/eurocordexr/reference/rotpole_nc_point_to_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract time series of a single grid cell of a rot-pole daily netcdf to data.table — rotpole_nc_point_to_dt","text":"filename Complete path .nc file. variable Name variable extract filename (character). point_lon Numeric longitude point extract (decimal degrees). point_lat Numeric latitude point extract (decimal degrees). interpolate_to_standard_calendar Boolean, TRUE use map_non_standard_calendar interpolate values standard calendar. verbose Boolean, TRUE, print information. add_grid_coord Boolean, TRUE, add columns result give longitude latitude underlying grid.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/rotpole_nc_point_to_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract time series of a single grid cell of a rot-pole daily netcdf to data.table — rotpole_nc_point_to_dt","text":"data.table two columns: dates   date, values variable named input variable.   date column class Date, unless .nc   file non-standard calendar (360, noleap)   interpolate_to_standard_calendar set FALSE,   character. add_grid_coord set TRUE,   two columns named grid_lon grid_lat.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/rotpole_nc_point_to_dt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract time series of a single grid cell of a rot-pole daily netcdf to data.table — rotpole_nc_point_to_dt","text":"Calculates euclidean distance, takes grid cell minimal distance point_lon point_lat. Requires .nc file contains variables lon[rlon, rlat] lat[rlon, rlat].","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/rotpole_nc_point_to_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract time series of a single grid cell of a rot-pole daily netcdf to data.table — rotpole_nc_point_to_dt","text":"","code":"# example data from EURO-CORDEX (cropped for size)  # standard calendar fn1 <- system.file(\"extdata\", \"test1.nc\", package = \"eurocordexr\") dt1 <- rotpole_nc_point_to_dt(   filename = fn1,   variable = \"tasmin\",   point_lon = 11.31,   point_lat = 46.5,   verbose = TRUE ) #> Succesfully opened file: /home/runner/work/_temp/Library/eurocordexr/extdata/test1.nc  #> Point longitude =  11.31  ## Closest grid cell =  11.30084  #> Point latitude =  46.5  ## Closest grid cell =  46.52603  #> Euclidean distance in degrees =  0.02759755   # non-standard calendar (360) fn2 <- system.file(\"extdata\", \"test2.nc\", package = \"eurocordexr\")  # read as is dt2 <- rotpole_nc_point_to_dt(fn2, \"tasmin\", 11.31, 46.5) str(dt2) # chr date #> Classes ‘data.table’ and 'data.frame':\t390 obs. of  2 variables: #>  $ date  : chr  \"1949-12-01\" \"1949-12-02\" \"1949-12-03\" \"1949-12-04\" ... #>  $ tasmin: num  264 263 262 270 275 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  dt2[86:94, ] # e.g. 30th of February in 360 calendar #>          date   tasmin #>        <char>    <num> #> 1: 1950-02-26 273.2633 #> 2: 1950-02-27 272.6217 #> 3: 1950-02-28 266.5659 #> 4: 1950-02-29 262.9583 #> 5: 1950-02-30 264.9355 #> 6: 1950-03-01 268.0822 #> 7: 1950-03-02 266.9084 #> 8: 1950-03-03 267.9066 #> 9: 1950-03-04 266.9478  # interpolate to standard dt3 <- rotpole_nc_point_to_dt(fn2, \"tasmin\", 11.31, 46.5,                               interpolate_to_standard_calendar = TRUE) str(dt3) # class Date #> Classes ‘data.table’ and 'data.frame':\t395 obs. of  2 variables: #>  $ date  : Date, format: \"1949-12-01\" \"1949-12-02\" ... #>  $ tasmin: num  264 263 262 270 275 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  dt3[86:94, ] # standard calender #>          date   tasmin #>        <Date>    <num> #> 1: 1950-02-24 271.9780 #> 2: 1950-02-25 273.2633 #> 3: 1950-02-26 272.6217 #> 4: 1950-02-27 266.5659 #> 5: 1950-02-28 262.9583 #> 6: 1950-03-01 264.9355 #> 7: 1950-03-02 268.0822 #> 8: 1950-03-03 266.9084 #> 9: 1950-03-04 267.9066"},{"path":"https://mitmat.github.io/eurocordexr/reference/shortnames_gcm.html","id":null,"dir":"Reference","previous_headings":"","what":"Abbreviations for RCM and GCM names — shortnames_gcm","title":"Abbreviations for RCM and GCM names — shortnames_gcm","text":"character vectors short names RCM GCMs, long RCM/GCM names vector-names, can used renaming:","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/shortnames_gcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abbreviations for RCM and GCM names — shortnames_gcm","text":"","code":"shortnames_gcm  shortnames_rcm"},{"path":"https://mitmat.github.io/eurocordexr/reference/shortnames_gcm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Abbreviations for RCM and GCM names — shortnames_gcm","text":"object class character length 8. object class character length 12.","code":""},{"path":"https://mitmat.github.io/eurocordexr/reference/shortnames_gcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abbreviations for RCM and GCM names — shortnames_gcm","text":"","code":"# for example from inventory fn_zip <- system.file(\"extdata\", \"inv-test-files.zip\", package = \"eurocordexr\") tmpdir <- tempdir() unzip(fn_zip, exdir = tmpdir) dat_inv <- get_inventory(fs::path(tmpdir, \"testdata\")) # compare cbind(dat_inv$gcm, shortnames_gcm[dat_inv$gcm]) #>                       [,1]                    [,2]           #> ICHEC-EC-EARTH        \"ICHEC-EC-EARTH\"        \"EC-EARTH\"     #> IPSL-IPSL-CM5A-LR     \"IPSL-IPSL-CM5A-LR\"     \"IPSL-CM5A-LR\" #> CNRM-CERFACS-CNRM-CM5 \"CNRM-CERFACS-CNRM-CM5\" \"CNRM-CM5\"     #> CNRM-CERFACS-CNRM-CM5 \"CNRM-CERFACS-CNRM-CM5\" \"CNRM-CM5\"     #> MPI-M-MPI-ESM-LR      \"MPI-M-MPI-ESM-LR\"      \"MPI-ESM-LR\"   #> MPI-M-MPI-ESM-LR      \"MPI-M-MPI-ESM-LR\"      \"MPI-ESM-LR\"   #> CNRM-CERFACS-CNRM-CM5 \"CNRM-CERFACS-CNRM-CM5\" \"CNRM-CM5\"     #> CNRM-CERFACS-CNRM-CM5 \"CNRM-CERFACS-CNRM-CM5\" \"CNRM-CM5\"     cbind(dat_inv$institute_rcm, shortnames_rcm[dat_inv$institute_rcm]) #>                              [,1]                           [,2]                #> KNMI-RACMO22E                \"KNMI-RACMO22E\"                \"RACMO22E\"          #> GERICS-REMO2015              \"GERICS-REMO2015\"              \"REMO2015\"          #> CLMcom-ETH-COSMO-crCLIM-v1-1 \"CLMcom-ETH-COSMO-crCLIM-v1-1\" \"COSMO-crCLIM-v1-1\" #> CNRM-ALADIN63                \"CNRM-ALADIN63\"                \"ALADIN63\"          #> CLMcom-ETH-COSMO-crCLIM-v1-1 \"CLMcom-ETH-COSMO-crCLIM-v1-1\" \"COSMO-crCLIM-v1-1\" #> CLMcom-ETH-COSMO-crCLIM-v1-1 \"CLMcom-ETH-COSMO-crCLIM-v1-1\" \"COSMO-crCLIM-v1-1\" #> CLMcom-ETH-COSMO-crCLIM-v1-1 \"CLMcom-ETH-COSMO-crCLIM-v1-1\" \"COSMO-crCLIM-v1-1\" #> CLMcom-ETH-COSMO-crCLIM-v1-1 \"CLMcom-ETH-COSMO-crCLIM-v1-1\" \"COSMO-crCLIM-v1-1\""},{"path":"https://mitmat.github.io/eurocordexr/news/index.html","id":"eurocordexr-025","dir":"Changelog","previous_headings":"","what":"eurocordexr 0.2.5","title":"eurocordexr 0.2.5","text":"CRAN release: 2025-01-07 added nc_grid_to_dt_raw(), gives basic access netcdf file using RNetCDF library added pkgdown website usage articles","code":""},{"path":"https://mitmat.github.io/eurocordexr/news/index.html","id":"eurocordexr-024","dir":"Changelog","previous_headings":"","what":"eurocordexr 0.2.4","title":"eurocordexr 0.2.4","text":"CRAN release: 2023-08-24 added internal data vectors short names GCMs RCMs removed depends, namespace imports added tests added test data run examples get_inventory() check_inventory() added function get_inventory_cmip5() get CMIP5 gcm info","code":""},{"path":"https://mitmat.github.io/eurocordexr/news/index.html","id":"eurocordexr-023","dir":"Changelog","previous_headings":"","what":"eurocordexr 0.2.3","title":"eurocordexr 0.2.3","text":"CRAN release: 2023-05-19 updated check_inventory() work CORDEX-Adjust data, . Check full period also works historical merged RCP filenames. added date_range parameter nc_grid_to_dt() allow easier extraction subset data added helper function get_varnames() list variable names netcdf file variable argument nc_grid_to_dt() rotpole_nc_point_to_dt() guessed supplied made inventory data.table get_inventory() separate class, specific print method prints nicely. example, list files printed anymore, thus also changed default add_files get_inventory() TRUE instead FALSE. added workaround “months since” calendar, work well ncdf4.helpers added check check_inventory() test rcp scenarios corresponding historical run","code":""},{"path":"https://mitmat.github.io/eurocordexr/news/index.html","id":"eurocordexr-022","dir":"Changelog","previous_headings":"","what":"eurocordexr 0.2.2","title":"eurocordexr 0.2.2","text":"CRAN release: 2021-08-19 updated description links, put packages API single quotes spelled TRUE FALSE check_inventory() now returns overloaded list class “eurocordex_inv_check” specific print method added test netCDF files, cropped EURO-CORDEX size; used examples","code":""},{"path":"https://mitmat.github.io/eurocordexr/news/index.html","id":"eurocordexr-021","dir":"Changelog","previous_headings":"","what":"eurocordexr 0.2.1","title":"eurocordexr 0.2.1","text":"changed package imports use .onLoad() library() rely #' @import updated check_inventory() compare_variables_in_inventory() reflect changes get_inventory() added check complete periods check_inventory() misc polishing submission CRAN consolidate licenses CRAN github added globalVariables() reformatted examples remove R CHECK NOTES","code":""},{"path":"https://mitmat.github.io/eurocordexr/news/index.html","id":"eurocordexr-020","dir":"Changelog","previous_headings":"","what":"eurocordexr 0.2.0","title":"eurocordexr 0.2.0","text":"improved get_inventory() overview file dates initial version imported Eurac gitlab Added NEWS.md file track changes package.","code":""}]
